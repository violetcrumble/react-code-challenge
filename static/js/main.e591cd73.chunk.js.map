{"version":3,"sources":["Icon/index.js","EditTractOwnership/mineralinterestitem.js","EditTractOwnership/index.js","App.js","serviceWorker.js","index.js"],"names":["library","add","faLevelUpAlt","faMinusCircle","faPlus","faSmile","Icon","iconProps","icon","rotation","getIconProps","MineralInterestItem","tract","status","Row","data-testid","id","Col","Form","Group","Control","placeholder","owner","interest","interst","lease","npris","length","map","npri","key","EditTractOwnership","value","onChange","useState","isAddNewMineralInterestShowing","setIsAddNewMineralInterestShowing","Container","Card","Button","onClick","tractOwnerships","uuidv4","App","tracts","Jumbotron","v","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e591cd73.chunk.js","sourcesContent":["import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport {\n  faLevelUpAlt,\n  faMinusCircle,\n  faPlus,\n  faSmile,\n} from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faLevelUpAlt, faMinusCircle, faPlus, faSmile);\n\nconst getIconProps = icon => {\n  switch (icon) {\n    case 'add':\n      return {\n        icon: 'plus',\n      };\n    case 'indent':\n      return {\n        icon: 'level-up-alt',\n        rotation: 90,\n      };\n    case 'remove':\n      return {\n        icon: 'minus-circle',\n      };\n    case 'smile':\n      return {\n        icon: 'smile',\n      };\n    default:\n      return {};\n  }\n};\n\nconst Icon = ({ icon }) => {\n  const iconProps = getIconProps(icon);\n\n  return <FontAwesomeIcon {...iconProps} />;\n};\n\nexport default Icon;\n","import React, { useState, Fragment } from 'react';\nimport uuidv4 from 'uuid/v4';\nimport Icon from '../Icon';\n\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\n\nconst MineralInterestItem = ({ tract, status }) => {\n  return (\n    <Fragment>\n      <Row\n        data-testid={\n          tract ? `mineralInterest-${tract.id}` : 'mineralInterestRowAdd'\n        }\n      >\n        <Col>\n          <Form.Group>\n            <Form.Control\n              placeholder={tract && tract.owner ? tract.owner : 'owner'}\n            />\n          </Form.Group>\n        </Col>\n        <Col>\n          <Form.Group>\n            <Form.Control\n              placeholder={tract && tract.interest ? tract.interst : 'interest'}\n            />\n          </Form.Group>\n        </Col>\n        <Col>&nbsp;</Col>\n        <Col>\n          <Form.Group>\n            <Form.Control\n              placeholder={tract && tract.lease ? tract.lease : 'lease'}\n            />\n          </Form.Group>\n        </Col>\n        <Col>\n          <Col>{status === 'new' ? ' ' : <Icon icon=\"remove\" />}</Col>\n        </Col>\n      </Row>\n      {tract && tract.npris && tract.npris.length > 0\n        ? tract.npris.map(npri => (\n            <Row data-testid={`npri-${npri.id}`} key={npri.id}>\n              <Col>\n                <Icon icon=\"indent\" /> {npri.owner}\n              </Col>\n              <Col>&nbsp;</Col>\n              <Col>{npri.interest}</Col>\n              <Col>{npri.lease}</Col>\n              <Col>\n                <Icon icon=\"remove\" />\n              </Col>\n            </Row>\n          ))\n        : null}\n    </Fragment>\n  );\n};\n\nexport default MineralInterestItem;\n","import React, { useState, Fragment } from 'react';\n// import uuidv4 from 'uuid/v4';\n// import Icon from '../Icon';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n// import Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport MineralInterestItem from './mineralinterestitem.js';\n\nconst EditTractOwnership = ({ value = [], onChange }) => {\n  const [\n    isAddNewMineralInterestShowing,\n    setIsAddNewMineralInterestShowing,\n  ] = useState(false);\n\n  return (\n    <Container>\n      <Row>\n        <Col>Owner</Col>\n        <Col>Mineral Interest</Col>\n        <Col>NPRI</Col>\n        <Col>Lease</Col>\n        <Col>&nbsp;</Col>\n      </Row>\n\n      {value.length > 0 ? (\n        value.map(tract => (\n          <Fragment key={tract.id}>\n            <MineralInterestItem tract={tract} />\n          </Fragment>\n        ))\n      ) : (\n        <Row>\n          <p>No listings.</p>\n        </Row>\n      )}\n\n      {isAddNewMineralInterestShowing ? (\n        <Card>\n          <h3>Add New Mineral Interest</h3>\n          <MineralInterestItem status=\"new\" />\n          <Row>\n            <Col>\n              <Button onClick={() => onChange(value)}>Add</Button>\n            </Col>\n            <Col>\n              <Button onClick={() => setIsAddNewMineralInterestShowing(false)}>\n                Cancel\n              </Button>\n            </Col>\n          </Row>\n        </Card>\n      ) : (\n        <Button onClick={() => setIsAddNewMineralInterestShowing(true)}>\n          Add Mineral Interest\n        </Button>\n      )}\n    </Container>\n  );\n};\n\nexport default EditTractOwnership;\n","import React, { useState } from 'react';\nimport { Col, Container, Jumbotron, Row } from 'react-bootstrap';\nimport uuidv4 from 'uuid/v4';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\nimport EditTractOwnership from './EditTractOwnership';\nimport Icon from './Icon';\n\nconst tractOwnerships = [\n  {\n    id: uuidv4(),\n    owner: 'Luke Skywalker',\n    interest: 0.5,\n    lease: 'Tatooine Lease',\n    npris: [\n      {\n        id: uuidv4(),\n        owner: 'Leia Organa',\n        interest: 0.45,\n      },\n      {\n        id: uuidv4(),\n        owner: 'Han Solo',\n        interest: 0.15,\n      },\n    ],\n  },\n];\n\nlet result;\n\nfunction App() {\n  const [tracts, setTracts] = useState(tractOwnerships);\n\n  const addMineralInterest = mineralInterest => {\n    mineralInterest.id = uuidv4();\n    setTracts([...tractOwnerships, mineralInterest]);\n  };\n\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <Jumbotron>\n            <h1>\n              Landdox Code Challenge <Icon icon=\"smile\" />\n            </h1>\n          </Jumbotron>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <EditTractOwnership value={tracts} onChange={v => (result = v)} />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}