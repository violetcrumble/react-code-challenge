{"version":3,"sources":["Icon/index.js","EditTractOwnership/index.js","App.js","serviceWorker.js","index.js"],"names":["library","add","faLevelUpAlt","faMinusCircle","faPlus","faSmile","Icon","iconProps","icon","rotation","getIconProps","EditTractOwnership","value","onChange","useState","tracts","setTracts","ownerToAdd","setOwnerToAdd","interestToAdd","setInterestToAdd","leaseToAdd","setLeaseToAdd","isAddInterestVisible","setIsAddInterestVisible","isAddNPRIVisible","setIsAddNPRIVisible","Container","Row","Col","map","tract","key","id","Form","Control","type","placeholder","owner","interest","Button","onClick","lease","Card","Body","Group","event","target","concat","uuidv4","npris","tractOwnerships","App","Jumbotron","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1c6bfe3f.chunk.js","sourcesContent":["import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport {\n  faLevelUpAlt,\n  faMinusCircle,\n  faPlus,\n  faSmile,\n} from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faLevelUpAlt, faMinusCircle, faPlus, faSmile);\n\nconst getIconProps = icon => {\n  switch (icon) {\n    case 'add':\n      return {\n        icon: 'plus',\n      };\n    case 'indent':\n      return {\n        icon: 'level-up-alt',\n        rotation: 90,\n      };\n    case 'remove':\n      return {\n        icon: 'minus-circle',\n      };\n    case 'smile':\n      return {\n        icon: 'smile',\n      };\n    default:\n      return {};\n  }\n};\n\nconst Icon = ({ icon }) => {\n  const iconProps = getIconProps(icon);\n\n  return <FontAwesomeIcon {...iconProps} />;\n};\n\nexport default Icon;\n","import React, { useState, Fragment } from 'react';\nimport uuidv4 from 'uuid/v4';\nimport Icon from '../Icon';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nconst EditTractOwnership = ({\n  value,\n  onChange = () => {\n    console.log('change!');\n  },\n}) => {\n  const [tracts, setTracts] = useState(value);\n  const [ownerToAdd, setOwnerToAdd] = useState();\n  const [interestToAdd, setInterestToAdd] = useState();\n  const [leaseToAdd, setLeaseToAdd] = useState();\n\n  const [isAddInterestVisible, setIsAddInterestVisible] = useState(false);\n  const [isAddNPRIVisible, setIsAddNPRIVisible] = useState(false);\n\n  return (\n    <Container>\n      <Row>\n        <Col>Owner</Col>\n        <Col>Mineral Interest</Col>\n        <Col>NPRI</Col>\n        <Col>Lease</Col>\n        <Col>&nbsp;</Col>\n      </Row>\n\n      {tracts.map(tract => (\n        <Fragment key={tract.id}>\n          <Row>\n            <Col>\n              <Form.Control type=\"text\" placeholder={tract.owner} />\n            </Col>\n            <Col>\n              <Form.Control type=\"text\" placeholder={tract.interest} />\n            </Col>\n            <Col>\n              <Button\n                onClick={() => {\n                  setIsAddNPRIVisible(false);\n                }}\n              >\n                Add NPRI\n              </Button>\n            </Col>\n            <Col>\n              <Form.Control type=\"text\" placeholder={tract.lease} />\n            </Col>\n            <Col>\n              <Icon icon=\"remove\" />\n            </Col>\n          </Row>\n          {/* Form for adding NPRIs to each mineral interest */}\n          {isAddNPRIVisible ? (\n            <Row>\n              <Card>\n                <Card.Body>\n                  <h3>Add NPRI</h3>\n                  {/* TODO: Add Add NPRI form */}\n                </Card.Body>\n              </Card>\n            </Row>\n          ) : null}\n        </Fragment>\n      ))}\n\n      {/* Form for adding mineral interests */}\n      {isAddInterestVisible ? (\n        <Card>\n          <Card.Body>\n            <h3>Add Mineral Interest</h3>\n            <Row>\n              <Col>\n                <Form.Group>\n                  <Form.Control\n                    onChange={event => setOwnerToAdd(event.target.value)}\n                    type=\"text\"\n                    placeholder=\"owner\"\n                    id=\"owner\"\n                  />\n                </Form.Group>\n              </Col>\n              <Col>\n                <Form.Group>\n                  <Form.Control\n                    onChange={event => setInterestToAdd(event.target.value)}\n                    type=\"text\"\n                    placeholder=\"interest\"\n                  />\n                </Form.Group>\n              </Col>\n              <Col>&nbsp;</Col>\n              <Col>\n                <Form.Group>\n                  <Form.Control\n                    onChange={event => setLeaseToAdd(event.target.value)}\n                    type=\"text\"\n                    placeholder=\"lease\"\n                  />\n                </Form.Group>\n              </Col>\n              <Col>&nbsp;</Col>\n            </Row>\n\n            <Button\n              onClick={() => {\n                setTracts(\n                  tracts.concat({\n                    id: uuidv4(),\n                    owner: ownerToAdd,\n                    interest: interestToAdd,\n                    lease: leaseToAdd,\n                    npris: [],\n                  })\n                );\n              }}\n            >\n              Add\n            </Button>\n\n            <Button\n              onClick={() => {\n                setIsAddInterestVisible(false);\n              }}\n            >\n              Cancel\n            </Button>\n          </Card.Body>\n        </Card>\n      ) : (\n        <Button onClick={() => setIsAddInterestVisible(true)}>\n          Add Mineral Interest\n        </Button>\n      )}\n    </Container>\n  );\n};\n\nexport default EditTractOwnership;\n","import React from 'react';\nimport { Col, Container, Jumbotron, Row } from 'react-bootstrap'\nimport uuidv4 from 'uuid/v4'\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\nimport EditTractOwnership from './EditTractOwnership'\nimport Icon from './Icon'\n\nconst tractOwnerships = [{\n  id: uuidv4(),\n  owner: \"Luke Skywalker\",\n  interest: 0.5,\n  lease: \"Tatooine Lease\",\n  npris: [{\n    id: uuidv4(),\n    owner: \"Leia Organa\",\n    interest: 0.45\n  }, {\n    id: uuidv4(),\n    owner: \"Han Solo\",\n    interest: 0.15\n  }]\n}]\n\nfunction App() {\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <Jumbotron>\n            <h1>Landdox Code Challenge <Icon icon=\"smile\" /></h1>\n          </Jumbotron>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <EditTractOwnership value={tractOwnerships} />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}